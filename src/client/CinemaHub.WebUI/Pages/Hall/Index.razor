@page "/hall/get-all"
@inject NavigationManager Navigation
@inject IObjService<CinemaDto, CinemaCreateDto, CinemaUpdateDto> CinemaService
@inject IObjService<HallDto, HallCreateDto, HallUpdateDto> HallService
@inject IObjService<ScreenSizeDto, ScreenSizeCreateDto, ScreenSizeUpdateDto> ScreenSizeService
@inject IMapper mapper
<link href="~/css/bootstrap/bootstrap.min.css">
<div class="float-end" style="width:10px"></div>



<a href="/hall/add" class="btn btn-success float-end">Add Hall</a>
<div class="float-end" style="width:10px"></div>
<h2 class="mt-3 mb-3">Halls</h2>

@if (halls == null)
{
    <p><em>Loading...</em></p>
}
else if (!halls.Any())
{
    <p>No halls available.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr class="text-center align-middle">
                <th>Title</th>
                <th>Rows</th>
                <th>Columns</th>
                <th>Cinema Title</th>
                <th>Screen size</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hall in halls)
            {
                <tr class="text-center align-middle">
                    <td><strong>@hall.Title</strong></td>
                    <td><strong>@hall.RowsNumber</strong></td>
                    <td><strong>@hall.ColumnsNumber</strong></td>
                    <td><strong>@hall.CinemaTitle</strong></td>
                    <td><strong>@hall.ScreenSize</strong></td>
                    <td class="d-flex flex-column gap-2 align-content-center justify-content-around">
                        <a href="hall/update/@hall.Id" class="btn btn-warning">Edit</a>
                        <button @onclick="() => Delete(hall.Id)" class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CinemaDto> cinemas = new List<CinemaDto>();
    private List<ScreenSizeDto> screenSizes= new List<ScreenSizeDto>();
    private List<HallDto> halls = new List<HallDto>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            HallService.SetEndpoint("hall");
            CinemaService.SetEndpoint("cinema");
            ScreenSizeService.SetEndpoint("screenSize");

            halls = await HallService.GetObjects();
            cinemas = await CinemaService.GetObjects();
            screenSizes = await ScreenSizeService.GetObjects();
            foreach (var hall in halls)
            {
                hall.CinemaTitle = cinemas.First(c => c.Id == hall.CinemaId).Title;
                var screenSize = screenSizes.First(ss => ss.Id == hall.ScreenSizeId);
                hall.ScreenSize = $"{screenSize.Width} X {screenSize.Height}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching halls: {ex.Message}");
        }
    }
    async Task Delete(Guid id)
    {
        await HallService.DeleteObject(id);
        halls = await HallService.GetObjects();
    }
}