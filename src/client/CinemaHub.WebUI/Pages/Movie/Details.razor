@page "/movie/details/{id:guid}"
@using System.Text.Json
@inject IObjService<MovieDto, MovieCreateDto, MovieUpdateDto> MovieService
@inject IObjService<ActorDto, ActorCreateDto, ActorUpdateDto> ActorService
@inject IObjService<DirectorDto, DirectorCreateDto, DirectorUpdateDto> DirectorService
@inject IObjService<GenreDto, GenreCreateDto, GenreUpdateDto> GenreService
@inject IMapper _mapper
@inject NavigationManager NavigationManager


<PageTitle>Movie @movie.Title</PageTitle>
<div class="d-flex flex-column justify-content-center ">
    <div>
        <h3 class="mb-5 text-center">@movie.Title @movie.MinAge +</h3>
    </div>


    <div class=" d-flex flex-row justify-content-around p-3  gap-3">
        <div>

            <img src="@movie.PosterUrl" class=" shadow-sm" style="max-height: 60vh;" />
        </div>
        <div class="d-flex flex-column justify-content-center border border-2 rounded-2 px-2 shadow-sm">
        <p><strong>Release date:</strong> @movie.Release.ToShortDateString()</p>
        <p><strong>Duration minutes:</strong> @movie.Duration</p>
        <p><strong>Genres</strong>: @(movie.Genres != null ? string.Join(", ", movie.Genres) : "No genres available")</p>
        <p><strong>Actors:</strong> @(movie.Actors != null ? string.Join(", ", movie.Actors) : "No actors available")</p>
        <p><strong>Directors:</strong> @(movie.Directors != null ? string.Join(", ", movie.Directors) : "No directors available")</p>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid? Id { get; set; }
    MovieDetailsDto movie { get; set; } = new MovieDetailsDto();
    List<ActorDto> actors = new List<ActorDto>();
    List<DirectorDto> directors = new List<DirectorDto>();
    List<GenreDto> genres = new List<GenreDto>();

    protected override async Task OnInitializedAsync()
    {
        MovieService.SetEndpoint("movie");
        ActorService.SetEndpoint("actor");
        DirectorService.SetEndpoint("director");
        GenreService.SetEndpoint("genre");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await MovieService.GetObjectById((Guid)Id);
            if (result is not null)
            {
                movie = _mapper.Map<MovieDetailsDto>(result);
            }
            else
            {
                NavigationManager.NavigateTo("/movie/get-all");
            }
        }
    }
}