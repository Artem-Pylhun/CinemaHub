@page "/screening/get-all"
@inject NavigationManager Navigation
@inject IObjService<ScreeningDto, ScreeningCreateDto, ScreeningUpdateDto> ScreeningService
@inject IObjService<MovieDto, MovieCreateDto, MovieUpdateDto> MovieService
@inject IObjService<HallDto, HallCreateDto, HallUpdateDto> HallService
@inject IMapper mapper
<link href="~/css/bootstrap/bootstrap.min.css">
<div class="float-end" style="width:10px"></div>



<a href="/screening/add" class="btn btn-success float-end">Add Screening</a>
<div class="float-end" style="width:10px"></div>
<h2 class="mt-3 mb-3">Screenings</h2>

@if (screenings == null)
{
    <p><em>Loading...</em></p>
}
else if (!screenings.Any())
{
    <p>No screenings available.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr class="text-center align-middle">
                <th>Movie</th>
                <th>Hall</th>
                <th>Usual price</th>
                <th>Vip price</th>
                <th>Start time</th>
                <th>Is 3D</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var screening in screenings)
            {
                <tr class="text-center align-middle">
                    <td><strong>@screening.MovieTitle</strong></td>  
                    <td><strong>@screening.HallTitle</strong></td>
                    <td><strong>@screening.UsualTicketsPrice</strong></td>
                    <td><strong>@screening.VIPTicketsPrice</strong></td>
                    <td><strong>@screening.StartTime</strong></td>
                    <td><strong>@screening.Is3DCapable</strong></td>
                    <td class="text-center d-flex justify-content-evenly gap-1">
                        <a href="screening/update/@screening.Id" class="btn btn-warning">Edit</a>
                        <button @onclick="() => Delete(screening.Id)" class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ScreeningDto> screenings = new List<ScreeningDto>();
    private List<MovieDto> movies = new List<MovieDto>();
    private List<HallDto> halls = new List<HallDto>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            HallService.SetEndpoint("hall");
            MovieService.SetEndpoint("movie");
            ScreeningService.SetEndpoint("screening");

            halls = await HallService.GetObjects();
            screenings = await ScreeningService.GetObjects();
            movies = await MovieService.GetObjects();
            foreach (var screening in screenings)
            {
                screening.MovieTitle= movies.First(m => m.Id == screening.MovieId).Title;
                screening.HallTitle = halls.First(h => h.Id == screening.HallId).Title;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching screenings: {ex.Message}");
        }
    }
    async Task Delete(Guid id)
    {
        await ScreeningService.DeleteObject(id);
        screenings = await ScreeningService.GetObjects();
    }
}