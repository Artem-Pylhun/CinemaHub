@page "/actor/add"
@using System.Text.Json
@inject IObjService<ActorDto, ActorCreateDto, ActorUpdateDto> ActorService
@inject IMapper _mapper
@inject NavigationManager NavigationManager

<PageTitle>Add actor</PageTitle>
<h3>Add actor</h3>
<EditForm Model="actor" OnSubmit="HandleSubmit" FormName="AddActor">
    <div>
        <div>
            <label for="fullname">Full name</label>
            <InputText @bind-Value="actor.FullName" class="form-control"></InputText>
        </div>
        <div>
            <label for="gender">Gender</label>
            <InputText @bind-Value="actor.Gender" class="form-control"></InputText>
        </div>
        <div>
            <label for="dateOfBirth">Full name</label>
            <InputDate @bind-Value="actor.DateOfBirth" class="form-control"></InputDate>
        </div>
        <div>
            <label for="nationality">Nationality</label>
            <InputText @bind-Value="actor.Nationality" class="form-control"></InputText>
        </div>
        <div>
            <label for "filename">Photo</label>
            <InputFile OnChange="@GetPhoto" class="form-control"></InputFile>
        </div>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Create actor</button>
</EditForm>


@code {
    ActorCreateDto actor = new ActorCreateDto();

    async Task HandleSubmit()
    {
        Console.WriteLine(JsonSerializer.Serialize(actor));
        await ActorService.CreateObject(actor);
    }

    protected override async Task OnInitializedAsync()
    {

            ActorService.SetEndpoint("actor");
    
    }
    public async Task GetPhoto(InputFileChangeEventArgs e)
    {
        var file = await e.File.ToBase64Async();
        actor.ClientImageFile = file;

    }
}